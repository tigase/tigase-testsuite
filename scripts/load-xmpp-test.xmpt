##
##  Tigase Jabber/XMPP Test Suite
##  Copyright (C) 2004-2007 "Artur Hefczyc" <artur.hefczyc@tigase.org>
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program. Look for COPYING file in the top folder.
##  If not, see http://www.gnu.org/licenses/.
##
##  $Rev: $
##  Last modified by $Author: $
##  $Date: $
##
-version = "2.0.0"

-output-format  = html
-output-file    = "../www/load-test.html"
-output-history = no
-history-format = separate-file
-output-cols    = 7
-title          = "XMPP Server high load server test. Attempt to make 25k connections"

$(server-host) = test-d
$(def-user)    = load-tester
$(daemon-user) = tester_1
$(ssl-tls-wait) = 5000
$(stats-user) = admin
$(stats-pass) = stats

-serverip    = "192.168.0.13"
-host        = $(server-host)
-user-name   = $(stats-user)
-user-pass   = $(stats-pass)
-socket-wait = 10000
-base-ns     = "jabber:client"
-def-auth    = auth-plain
-keys-file-password   = keystore
-trusts-file-password = truststore
-keys-file            = "certs/keystore"
-trusts-file          = "certs/client_truststore"

-debug-on-error

Version@auth-plain;iq-version: >> Get server version <<
Configuration@command-get-config: >> Server configuration <<
Statistics@iq-stats: >> Server statistics <<
#Common test@auth-plain;common: { -source-file = "tests/data/CreateTesterTask.cot" }
#>> Create tester task <<

# Prep 1@user-register: {
#   -loop = 200000
#   -no-record
#   -user-name = "load-tester_$(loop)"
# } >> Create tester user accounts <<

Load tests:
{
  -multi-thread
  -loop = 100
#  -on-one-socket
  -repeat-script = 1000
  -repeat-wait = 1000
  -delay = 5000

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 0
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 100
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 200
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 300
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 400
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 500
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 600
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 700
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 800
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

  Test 1@auth-plain;common: Send a message to $(daemon-user) user
  {
    -loop-start = 900
    -background
    -user-name = "load-tester_$(loop)"
    -to-jid = "$(daemon-user)@srecv.$(server-host)"
    -source-file = "tests/data/TesterMessage.cot"
  } >> Send a message to $(daemon-user) user <<

}
>> Load tests for the server, goal 25k client connections <<
